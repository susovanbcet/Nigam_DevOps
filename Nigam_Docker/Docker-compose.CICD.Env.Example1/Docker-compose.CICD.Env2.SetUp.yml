# To Bring up the container mentioned in this yml file
# docker-compose -f <Docker-Compose-File-Name> up -d
# docker-compose -f Docker-compose.CICD.Env2.SetUp up -d

# To Bring down the container mentioned in this yml file
# docker-compose -f <Docker-Compose-File-Name> down
# docker-compose -f Docker-compose.CICD.Env2.SetUp down


# docker.bintray.io/jfrog/artifactory-oss
# redmine  -- alternate to JIRA
# google/cadvisor:latest
# sonarqube
# jenkins


# Sangita:~ Nigam$ mkdir -p /var/jenkins_home
# Sangita:~ Nigam$ chown -R 1000:1000 /var/jenkins_home
# Sangita:~ Nigam$ docker run -p 8080:8080 -p 50000:50000 -v /var/jenkins_home:/var/jenkins_home -d --name jenkins jenkins


version: "3.2"
# ========================================================================================
services:
  artifactory1:
    image: docker.bintray.io/jfrog/artifactory-oss
    hostname: artifactory1
    container_name: artifactory1
    ports:
      - "8081:8081"
    environment:
      TZ: America/New_York
    networks:
         - network_env2


# A ===============================================================================
# $ docker run -d --name artifactory-5 \
#     -e DB_TYPE=mysql \
#     -e DB_HOST=mysql5srv.jfrog.local \
#     -e DB_PORT=33307 \
#     -e DB_USER=artifactory17 \
#     -e DB_PASSWORD=pass17arti56_x \
#     -v ~/mysql-connector-java-5.1.40-bin.jar:/opt/jfrog/artifactory/tomcat/lib/mysql-connector-java-5.1.40-bin.jar \
#              -v /var/opt/jfrog/artifactory:/var/opt/jfrog/artifactory \
#              -p 8081:8081 docker.bintray.io/jfrog/artifactory-pro:latest

services:
  artifactory2:
    image: docker.bintray.io/jfrog/artifactory-oss
    hostname: artifactory2
    container_name: artifactory2
    ports:
      - "8082:8081"
    environment:
      TZ: America/New_York
      DB_TYPE: mysql
      DB_HOST: mysql5srv.jfrog.local 
      DB_PORT: 33307 
      DB_USER: db_art_user
      DB_PASSWORD: db_art_pass 
    networks:
         - network_env2

# A ===============================================================================

  cadvisor:
    image: google/cadvisor:latest
    hostname: cadvisor
    container_name: cadvisor
    ports:
      - "8083:8080"
    environment:
      TZ: America/New_York
    networks:
         - network_env2

# B ===============================================================================
  sonarqube:
    image: sonarqube
    hostname: sonarqube
    container_name: sonarqube
    ports:
      - "9000:9000"
      - "9092:9092"
    environment:
      TZ: America/New_York
#      SONARQUBE_JDBC_USERNAME: sonar
#      SONARQUBE_JDBC_PASSWORD: sonar
#      SONARQUBE_JDBC_URL: "jdbc:postgresql://localhost/sonar"
    networks:
         - network_env2

#docker run -d --name sonarqube \
#    -p 9000:9000 -p 9092:9092 \
#    -e SONARQUBE_JDBC_USERNAME=sonar \
#    -e SONARQUBE_JDBC_PASSWORD=sonar \
#    -e SONARQUBE_JDBC_URL=jdbc:postgresql://localhost/sonar \
#    sonarqube

# B ===============================================================================


  redmine:
    image: redmine
    restart: always
    ports:
      - 8084:3000
    environment:
      REDMINE_DB_MYSQL: db
      REDMINE_DB_PASSWORD: example
      TZ: America/New_York
    networks:
         - network_env2

  redmine_db:
    image: mysql:5.7
    restart: always
    environment:
      MYSQL_ROOT_PASSWORD: example
      MYSQL_DATABASE: redmine
    networks:
         - network_env2

networks:
  network_env2:
