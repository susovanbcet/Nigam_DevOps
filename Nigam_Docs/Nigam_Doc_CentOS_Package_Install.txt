CentOS Package Installation. 


1. Change Root User
	sudo -i		## OR ##	su -

2. Install Adobe Flash Player 64-bit x86_64 RPM package
	rpm -ivh http://linuxdownload.adobe.com/adobe-release/adobe-release-x86_64-1.0-1.noarch.rpm
	rpm --import /etc/pki/rpm-gpg/RPM-GPG-KEY-adobe-linux
	yum install flash-plugin alsa-plugins-pulseaudio libcurl

3. Install TextEditor "SubLime" 
	1. wget http://c758482.r82.cf2.rackcdn.com/sublime_text_3_build_3065_x64.tar.bz2
	2. tar -vxjf sublime_text_3_build_3065_x64.tar.bz2 -C /opt
	3. sublime3

4. Install Notepadqq 
    wget -O /etc/yum.repos.d/sea-devel.repo http://sea.fedorapeople.org/sea-devel.repo
    yum install notepadqq
    notepadqq


5. 
   sudo yum update
   sudo yum apt-get install apt-transport-https ca-certificates curl software-properties-common 
	
1. Install latest Docker CE
   sudo su -
	yum install -y yum-utils device-mapper-persistent-data lvm2
	yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo
	yum install docker-ce -y

2. Start Docker
	systemctl start docker
	systemctl enable docker
	systemctl ststus docker

	usermod -aG docker nigam
		
	sudo docker run hello-world

2.1 Docker Container lists
	List of all containers that are currently running 
	docker ps

	Llast active docker container 
	docker ps -l
		
	List of all containers that you ran. 
	docker ps -a

3. List of Docker images 
	sudo docker images
		
4. Install/pull/download a new (busybox) images
	docker pull busybox 

5. To create/run a Container out of (busybox) images
	docker run --detach --name server busybox

6. To remove a container (named server)
	docker rm server

6.  docker run -d --name server busybox sh -c "while true; do sleep 5; done"
		
7.  To Stop a container named "server" 
	docker stop server

8.  To Strt a container named "server" 
	docker start server
		
9.  To restart a container named "server" 
	docker restart server
		
10. To create/run a Container out of (busybox) images with interactive
	-i (for interactive). -t (TTY), -d (--detach run in the background) switch,
	docker run -itd --name server busybox 
		
10.1 To attach a docker - So that we can go inside the container 
	docker run -itd --name ns3 busybox


11. Docker networking
	--rm to remove/delete the container after use (exit)
	--net to specify network type
		none: doconnect from host
		bridge: bridge mode (by default)
		host: full access to the host’s network
		docker run -it --rm --net none busybox ifconfig -a
		docker run -it --rm --net bridge busybox ifconfig -a
		docker run -it --rm --net host busybox ifconfig -a

	docker run -it --name nserver1 --rm busybox ifconfig -a 
	[nigam@localhost ~]$ docker run -it --name nserver1 --rm busybox ifconfig -a
	eth0      Link encap:Ethernet  HWaddr 02:42:AC:11:00:02  
		  inet addr:172.17.0.2  Bcast:172.17.255.255  Mask:255.255.0.0
		  UP BROADCAST RUNNING MULTICAST  MTU:1500  Metric:1
		  RX packets:1 errors:0 dropped:0 overruns:0 frame:0
		  TX packets:0 errors:0 dropped:0 overruns:0 carrier:0
		  collisions:0 txqueuelen:0 
		  RX bytes:90 (90.0 B)  TX bytes:0 (0.0 B)

	lo        Link encap:Local Loopback  
		  inet addr:127.0.0.1  Mask:255.0.0.0
		  UP LOOPBACK RUNNING  MTU:65536  Metric:1
		  RX packets:0 errors:0 dropped:0 overruns:0 frame:0
		  TX packets:0 errors:0 dropped:0 overruns:0 carrier:0
		  collisions:0 txqueuelen:1 
		  RX bytes:0 (0.0 B)  TX bytes:0 (0.0 B)

12.  dgfdgfdgd
	-d will create a container with the process detached from our terminal
	-P will publish all the exposed container ports to random ports on the Docker host
	-e is how you pass environment variables to the container
	--name allows you to specify a container name
	AUTHOR is the environment variable name and Your Name is the value that you can pass
	
	docker run -d -p 80 --name webserver1 httpd 
	
	docker run -d -p <container_port>:<host_port> --name <container_name> <image_name>
	docker run -d -p 8080:80 --name webserver2 httpd
	
	docker run -d -p <accepting_request_from_Host>:<container_port>:<host_port> --name <container_name> <image_name>
	docker run -d -p 127.0.0.1:8080:80 --name webserver3 httpd

	docker run -d --name webserver4 --net host httpd



xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
13. docker Storage xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
	
	docker run -d --name <container_name> -p 8080:80 -v </path/to/host>:</path/to/container>s <image_name> 
	docker run -d --name webserver2 -p 8080:80 -v /path/to/host:/path/to/container httpd 
	docker run -d --name webserver2 -p 8080:80 -v "$(pwd)":/user/local/apache2/htdocs httpd 
	

	1. 


	2. Create named Volume
		docker volume create web-data-vol
	   Check the "web-data-vol" location in host machine
		docker volume inspect web-data-vol
	   Creating and running container
		docker run -d --name webserver2 -p 8080:80 -v web-data-vol:/user/local/apache2/htdocs httpd 



14. -e option. This allows you to inject environment variables into the containers
	docker run -e MYSQL_ROOT_PASSWORD=admin -e MYSQL_USER=wordpress -e MYSQL_PASSWORD=wordpress -e MYSQL_DATABASE=wp_database -v wp_database:/var/lib/mysql --name wordpressdb -d mariadb
	docker run -e MYSQL_ROOT_PASSWORD=admin \
						-e MYSQL_USER=wordpress \
						-e MYSQL_PASSWORD=wordpress \
						-e MYSQL_DATABASE=wp_database \
						-v wp_database:/var/lib/mysql \
						--name wordpressdb \
						-d mariadb

15. Install mysql client
	yum install mysql
		
16. To find out more about a Docker image (eg: wordpressdb or hello-world)
	docker inspect wordpressdb 
	docker inspect hello-world
	
17. Connecting to MySQL of container. 
	mysql -u <db_username> -pwordpress -h <db_ip_address>
	mysql -u wordpress -pwordpress -h 172.17.0.2
		
	
18. Install Ansible on a Centos, 
	Issue the following commands:
		yum install epel-release
		yum install ansible
	If you want to install it using pip  (make sure Python is installed):
		easy_install pip
		pip install ansible
	Verify Ansible installed 
		ansible --version
		
19. Install some prerequisites for Git 
	sudo yum -y install epel-release 
	sudo yum -y groupinstall development 
	sudo yum install curl-devel expat-devel gettext-devel openssl-devel perl-devel zlib-devel asciidoc xmlto docbook2X
		
	make a symbolic link: 
		sudo ln -s /usr/bin/db2x_docbook2texi/usr/bin/docbook2x-texi
		
	Clone the latest git repository from kernel.org: 
		git clone https://git.kernel.org/pub/scm/git/git.git
		
	Compile Git by running the following commands from inside the cloned git directory: 
		make all doc prefix=/usr && sudo make install install-doc install-html install-man prefix=/usr
		
	Check Git Version 
		git --version

docker run -it --name nserver1 --rm busybox ifconfig -a

	
19. Install some prerequisites for Git-Flow 	
	yum install gitflow

20. Install Eclips
	$ wget http://ftp.fau.de/eclipse/technology/epp/downloads/release/oxygen/2/eclipse-jee-oxygen-2-linux-gtk-x86_64.tar.gz
	$ sudo tar xfz eclipse-jee-oxygen-2-linux-gtk-x86_64.tar.gz -C /opt/
	$ ls /opt/eclipse/
	$ sudo ln -s /opt/eclipse/eclipse /usr/local/bin/eclipse
	$ ls -al /usr/local/bin/eclipse
	$ sudo nano /usr/share/applications/eclipse-oxygen.desktop
	$ cd /usr/share/applications/





